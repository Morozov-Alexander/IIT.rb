def checkup (number, letter)
flag = true
  if !letter || !number.between?(1,8)
    puts "Няма таких симвалау!!!\nТольки {a, b, c, d, e, f, g, h}\nAnd numbers between(1..8)\nДаю еще попытку!"
    flag = false
  end
flag
end

class Board
attr_accessor :hash
  @hash
      { [1,1] => [1, 'w','R'],[1,2] => [1, 'w','N'],[1,3] => [1, 'w','B'],[1,4] => [1, 'w','K'],[1,5] => [1, 'w','Q'],[1,6] => [1, 'w','B'],[1,7] => [1, 'w','N'],[1,8] => [1, 'w','R'],
        [2,1] => [1, 'w','P'],[2,2] => [1, 'w','P'],[2,3] => [1, 'w','P'],[2,4] => [1, 'w','P'],[2,5] => [1, 'w','P'],[2,6] => [1, 'w','P'],[2,7] => [1, 'w','P'],[2,8] => [1, 'w','P'],
        [3,1] => [0, ' ',' '],[3,2] => [0, ' ',' '],[3,3] => [0, ' ',' '],[3,4] => [0, ' ',' '],[3,5] => [0, ' ',' '],[3,6] => [0, ' ',' '],[3,7] => [0, ' ',' '],[3,8] => [0, ' ',' '],
        [4,1] => [0, ' ',' '],[4,2] => [0, ' ',' '],[4,3] => [0, ' ',' '],[4,4] => [0, ' ',' '],[4,5] => [0, ' ',' '],[4,6] => [0, ' ',' '],[4,7] => [0, ' ',' '],[4,8] => [0, ' ',' '],
        [5,1] => [0, ' ',' '],[5,2] => [0, ' ',' '],[5,3] => [0, ' ',' '],[5,4] => [0, ' ',' '],[5,5] => [0, ' ',' '],[5,6] => [0, ' ',' '],[5,7] => [0, ' ',' '],[5,8] => [0, ' ',' '],
        [6,1] => [0, ' ',' '],[6,2] => [0, ' ',' '],[6,3] => [0, ' ',' '],[6,4] => [0, ' ',' '],[6,5] => [0, ' ',' '],[6,6] => [0, ' ',' '],[6,7] => [0, ' ',' '],[6,8] => [0, ' ',' '],
        [7,1] => [0, ' ',' '],[7,2] => [0, ' ',' '],[7,3] => [0, ' ',' '],[7,4] => [0, ' ',' '],[5,5] => [0, ' ',' '],[5,6] => [0, ' ',' '],[5,7] => [0, ' ',' '],[5,8] => [0, ' ',' '],
        [6,1] => [0, ' ',' '],[6,2] => [0, ' ',' '],[6,3] => [0, ' ',' '],[6,4] => [0, ' ',' '],[6,5] => [0, ' ',' '],[6,6] => [0, ' ',' '],[6,7] => [0, ' ',' '],[6,8] => [0, ' ',' '],
        [7,1] => [1, 'b','P'],[7,2] => [1, 'b','P'],[7,3] => [1, 'b','P'],[7,4] => [1, 'b','P'],[7,5] => [1, 'b','P'],[7,6] => [1, 'b','P'],[7,7] => [1, 'b','P'],[7,8] => [1, 'b','P'],
        [8,1] => [1, 'b','R'],[8,2] => [1, 'b','N'],[8,3] => [1, 'b','B'],[8,4] => [1, 'b','K'],[8,5] => [1, 'b','Q'],[8,6] => [1, 'b','B'],[8,7] => [1, 'b','N'],[8,8] => [1, 'b','R'],}
end

class Move < Board
 def show_the_figure(array)
@array = @hash[array]
puts @array
 end

end

class Black < Move
end

class White < Move
end

black = Black.new
white = White.new
flag = true
replacement_array = {'a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5, 'f' => 6, 'g' => 7, 'h' => 8}
color_of_move  = 'w'

while flag
# puts color_of_move
  letter = replacement_array[gets.chomp.downcase]
  number = gets.chomp.to_i
  array = [[letter, number]]
next if !checkup(number, letter)

if color_of_move == 'w'

  white.show_the_figure(array)
  color_of_move = 'b'
else

   color_of_move = 'w'
end

puts 'exit'
  exit = gets.chomp.to_i
 if (exit == 0)
   return
 end


end
